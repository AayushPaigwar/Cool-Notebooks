# -*- coding: utf-8 -*-
"""Flipkart_Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17tJ8WggEkNEuaIPjIVF2NItVYk4W9E-3

## Importing Dependences
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

import nltk
import re
nltk.download('stopwords')
stemmer = nltk.SnowballStemmer("english")
from nltk.corpus import stopwords
import string
stopword=set(stopwords.words('english'))
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator

"""## Load the dataset"""

df = pd.read_csv('/content/flipkart_product_.csv', encoding="unicode_escape")
df.head()

"""## Check the shape of the data"""

df.shape

"""## Display basic information about the DataFrame"""

df.info()

"""## Check the Null values"""

df.isnull().sum()

"""## Drop any rows with missing values"""

df.dropna(inplace=True)

df.isnull().sum()

"""## Drop unnecessary columns"""

df.drop(columns=['product_price'],inplace=True)

df.info()

"""## Function to clean text in Review column

"""

def clean(text):
    text = str(text).lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    text = [word for word in text.split(' ') if word not in stopword]
    text=" ".join(text)
    text = [stemmer.stem(word) for word in text.split(' ')]
    text = " ".join(text)
    return text
df["Review"] = df["Review"].apply(clean)

"""## Function to clean text in Summary column

"""

def clean(text):
    text = str(text).lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    text = [word for word in text.split(' ') if word not in stopword]
    text=" ".join(text)
    text = [stemmer.stem(word) for word in text.split(' ')]
    text = " ".join(text)
    return text
df["Summary"] = df["Summary"].apply(clean)

"""## Visualize ratings distribution using a pie chart"""

ratings = df["Rate"].value_counts()
numbers = ratings.index
quantity = ratings.values

import plotly.express as px
figure = px.pie(df,
             values=quantity,
             names=numbers,hole = 0.5)
figure.show()

"""## Generate a word cloud based on the 'Review' column"""

text = " ".join(i for i in df.Review)
stopwords = set(STOPWORDS)
wordcloud = WordCloud(stopwords=stopwords,
                      background_color="white").generate(text)
plt.figure( figsize=(15,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

df.columns

"""## Analyze sentiment using the SentimentIntensityAnalyzer on the 'Review' column"""

nltk.download('vader_lexicon')
sentiments = SentimentIntensityAnalyzer()
df["Positive"] = [sentiments.polarity_scores(i)["pos"] for i in df["Review"]]
df["Negative"] = [sentiments.polarity_scores(i)["neg"] for i in df["Review"]]
df["Neutral"] = [sentiments.polarity_scores(i)["neu"] for i in df["Review"]]
df2 = df[["Review", "Positive", "Negative", "Neutral"]]
print(df2.head())

df.columns

"""## Analyze sentiment using the SentimentIntensityAnalyzer on the 'Summary' column"""

df["Positive"] = [sentiments.polarity_scores(i)["pos"] for i in df["Summary"]]
df["Negative"] = [sentiments.polarity_scores(i)["neg"] for i in df["Summary"]]
df["Neutral"] = [sentiments.polarity_scores(i)["neu"] for i in df["Summary"]]
df3 = df[["Summary", "Positive", "Negative", "Neutral"]]
print(df3.head())

"""## Get user input to check its sentiment"""

user_input = input("Enter your review: ")

cleaned_input = clean(user_input)

sentiment_score = sentiments.polarity_scores(cleaned_input)

if sentiment_score['compound'] >= 0.05:
    sentiment = 'Positive'
elif sentiment_score['compound'] <= -0.05:
    sentiment = 'Negative'
else:
    sentiment = 'Neutral'

print(f"Predicted Sentiment: {sentiment}")